import React, { useState, useEffect } from 'react';
import { useFlashSaleStore } from '../../stores/useFlashSaleStore';
import { useProductStore } from '../../stores/useProductStore';
import { Plus, Calendar, Clock, Edit, Trash2, ToggleLeft, ToggleRight } from 'lucide-react';
import { toast } from 'react-toastify';
import type { FlashSale, CreateFlashSaleRequest } from '../../types/FlashSale';

const AdminFlashSalePage: React.FC = () => {
  const {
    allFlashSales,
    loading,
    error,
    fetchAllFlashSales,
    createFlashSale,
    updateFlashSale,
    deleteFlashSale,
    toggleFlashSaleStatus,
    clearError
  } = useFlashSaleStore();

  const { products, fetchAll: fetchProducts } = useProductStore();

  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedFlashSale, setSelectedFlashSale] = useState<FlashSale | null>(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  const [formData, setFormData] = useState<CreateFlashSaleRequest>({
    name: '',
    description: '',
    startTime: '',
    endTime: '',
    products: [],
    bannerImage: '',
    priority: 0
  });

  const [selectedProducts, setSelectedProducts] = useState<{
    productId: string;
    flashSalePrice: number;
    quantity: number;
  }[]>([]);

  useEffect(() => {
    fetchAllFlashSales();
    fetchProducts();
  }, [fetchAllFlashSales, fetchProducts]);

  useEffect(() => {
    if (error) {
      toast.error(error);
      clearError();
    }
  }, [error, clearError]);

  const handleCreateFlashSale = async () => {
    try {
      // Validation
      if (!formData.name.trim()) {
        toast.error('Vui l√≤ng nh·∫≠p t√™n Flash Sale');
        return;
      }
      
      if (!formData.startTime) {
        toast.error('Vui l√≤ng ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu');
        return;
      }
      
      if (!formData.endTime) {
        toast.error('Vui l√≤ng ch·ªçn th·ªùi gian k·∫øt th√∫c');
        return;
      }
      
      if (new Date(formData.endTime) <= new Date(formData.startTime)) {
        toast.error('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu');
        return;
      }
      
      if (selectedProducts.length === 0) {
        toast.error('Vui l√≤ng th√™m √≠t nh·∫•t 1 s·∫£n ph·∫©m v√†o Flash Sale');
        return;
      }
      
      // Validate products
      for (let i = 0; i < selectedProducts.length; i++) {
        const item = selectedProducts[i];
        if (!item.productId) {
          toast.error(`Vui l√≤ng ch·ªçn s·∫£n ph·∫©m cho d√≤ng ${i + 1}`);
          return;
        }
        if (!item.flashSalePrice || item.flashSalePrice <= 0) {
          toast.error(`Vui l√≤ng nh·∫≠p gi√° Flash Sale h·ª£p l·ªá cho d√≤ng ${i + 1}`);
          return;
        }
        if (!item.quantity || item.quantity <= 0) {
          toast.error(`Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá cho d√≤ng ${i + 1}`);
          return;
        }
        
        const selectedProduct = products.find((p: any) => p.id === item.productId);
        if (selectedProduct && item.flashSalePrice >= selectedProduct.price) {
          toast.error(`Gi√° Flash Sale ph·∫£i th·∫•p h∆°n gi√° g·ªëc (${selectedProduct.price.toLocaleString('vi-VN')}‚Ç´) cho s·∫£n ph·∫©m "${selectedProduct.name}"`);
          return;
        }
      }

      const flashSaleData = {
        ...formData,
        products: selectedProducts
      };

      await createFlashSale(flashSaleData);
      toast.success('T·∫°o Flash Sale th√†nh c√¥ng!');
      setShowCreateModal(false);
      resetForm();
    } catch (error) {
  // ...existing code (ƒë√£ x√≥a log)...
    }
  };

  const handleUpdateFlashSale = async () => {
    try {
      if (!selectedFlashSale) return;

      // Convert startTime and endTime to ISO string if present
      const startTimeISO = formData.startTime ? new Date(formData.startTime).toISOString() : '';
      const endTimeISO = formData.endTime ? new Date(formData.endTime).toISOString() : '';

      const updateData = {
        ...formData,
        startTime: startTimeISO,
        endTime: endTimeISO,
        products: selectedProducts
      };

  // ...existing code (ƒë√£ x√≥a log)...

      await updateFlashSale(selectedFlashSale._id, updateData);
      toast.success('C·∫≠p nh·∫≠t Flash Sale th√†nh c√¥ng!');
      setShowEditModal(false);
      resetForm();
      fetchAllFlashSales(); // Refresh list after update
    } catch (error) {
  // ...existing code (ƒë√£ x√≥a log)...
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      toast.error(`L·ªói c·∫≠p nh·∫≠t Flash Sale: ${errorMessage}`);
    }
  };

  const handleDeleteFlashSale = async () => {
    try {
      if (!selectedFlashSale) return;

      await deleteFlashSale(selectedFlashSale._id);
      toast.success('X√≥a Flash Sale th√†nh c√¥ng!');
      setShowDeleteModal(false);
      setSelectedFlashSale(null);
    } catch (error) {
  // ...existing code (ƒë√£ x√≥a log)...
    }
  };

  const handleToggleStatus = async (flashSale: FlashSale) => {
    try {
      await toggleFlashSaleStatus(flashSale._id);
      toast.success(`${flashSale.isActive ? 'T·∫Øt' : 'B·∫≠t'} Flash Sale th√†nh c√¥ng!`);
    } catch (error) {
  // ...existing code (ƒë√£ x√≥a log)...
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      startTime: '',
      endTime: '',
      products: [],
      bannerImage: '',
      priority: 0
    });
    setSelectedProducts([]);
    setSelectedFlashSale(null);
  };

  const openEditModal = (flashSale: FlashSale) => {
    setSelectedFlashSale(flashSale);
    setFormData({
      name: flashSale.name || '',
      description: flashSale.description || '',
      startTime: flashSale.startTime ? new Date(flashSale.startTime).toISOString().slice(0, 16) : '',
      endTime: flashSale.endTime ? new Date(flashSale.endTime).toISOString().slice(0, 16) : '',
      products: flashSale.products.map((p: any) => ({
        productId: p.productId || '',
        flashSalePrice: typeof p.flashSalePrice === 'number' ? p.flashSalePrice : 0,
        quantity: typeof p.quantity === 'number' ? p.quantity : 0
      })),
      bannerImage: flashSale.bannerImage || '',
      priority: typeof flashSale.priority === 'number' ? flashSale.priority : 0
    });
    setSelectedProducts(flashSale.products.map((p: any) => ({
      productId: p.productId || '',
      flashSalePrice: typeof p.flashSalePrice === 'number' ? p.flashSalePrice : 0,
      quantity: typeof p.quantity === 'number' ? p.quantity : 0
    })));
    setShowEditModal(true);
  };

  const addProductToFlashSale = () => {
    setSelectedProducts([
      ...selectedProducts,
      {
        productId: '',
        flashSalePrice: 0,
        quantity: 0
      }
    ]);
  };

  const removeProductFromFlashSale = (index: number) => {
    setSelectedProducts(selectedProducts.filter((_, i) => i !== index));
  };

  const updateSelectedProduct = (index: number, field: string, value: any) => {
    const updated = [...selectedProducts];
    const item = updated[index] || { productId: '', flashSalePrice: 0, quantity: 0 };
    updated[index] = {
      productId: item.productId ?? '',
      flashSalePrice: typeof item.flashSalePrice === 'number' ? item.flashSalePrice : 0,
      quantity: typeof item.quantity === 'number' ? item.quantity : 0,
      ...{ [field]: value }
    };
    setSelectedProducts(updated);
  };

  const getStatusBadge = (flashSale: FlashSale) => {
    const now = new Date();
    const startTime = new Date(flashSale.startTime);
    const endTime = new Date(flashSale.endTime);

    if (!flashSale.isActive) {
      return <span className="bg-gray-500 text-white px-2 py-1 rounded-full text-xs">T·∫Øt</span>;
    }

    if (now < startTime) {
      return <span className="bg-blue-500 text-white px-2 py-1 rounded-full text-xs">S·∫Øp di·ªÖn ra</span>;
    } else if (now >= startTime && now <= endTime) {
      return <span className="bg-green-500 text-white px-2 py-1 rounded-full text-xs">ƒêang di·ªÖn ra</span>;
    } else {
      return <span className="bg-red-500 text-white px-2 py-1 rounded-full text-xs">ƒê√£ k·∫øt th√∫c</span>;
    }
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString('vi-VN');
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Qu·∫£n l√Ω Flash Sale</h1>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            T·∫°o v√† qu·∫£n l√Ω c√°c ch∆∞∆°ng tr√¨nh Flash Sale v·ªõi th·ªùi gian gi·ªõi h·∫°n v√† gi√° khuy·∫øn m√£i ƒë·∫∑c bi·ªát
          </p>
        </div>
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
        >
          <Plus className="w-5 h-5" />
          T·∫°o Flash Sale
        </button>
      </div>

      {/* Info cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
          <h3 className="font-medium text-blue-900 dark:text-blue-100 mb-2">üí° L∆∞u √Ω khi t·∫°o Flash Sale</h3>
          <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
            <li>‚Ä¢ Gi√° Flash Sale ph·∫£i th·∫•p h∆°n gi√° g·ªëc</li>
            <li>‚Ä¢ Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu</li>
            <li>‚Ä¢ S·ªë l∆∞·ª£ng gi·ªõi h·∫°n gi√∫p t·∫°o t√≠nh khan hi·∫øm</li>
          </ul>
        </div>
        
        <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
          <h3 className="font-medium text-green-900 dark:text-green-100 mb-2">‚ö° Tr·∫°ng th√°i Flash Sale</h3>
          <ul className="text-sm text-green-700 dark:text-green-300 space-y-1">
            <li>‚Ä¢ <span className="text-blue-600">S·∫Øp di·ªÖn ra</span>: Ch∆∞a ƒë·∫øn gi·ªù b·∫Øt ƒë·∫ßu</li>
            <li>‚Ä¢ <span className="text-green-600">ƒêang di·ªÖn ra</span>: Hi·ªán t·∫°i ƒëang ho·∫°t ƒë·ªông</li>
            <li>‚Ä¢ <span className="text-red-600">ƒê√£ k·∫øt th√∫c</span>: ƒê√£ h·∫øt th·ªùi gian</li>
          </ul>
        </div>
        
        <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg p-4">
          <h3 className="font-medium text-orange-900 dark:text-orange-100 mb-2">üìä Hi·ªÉn th·ªã tr√™n trang ch·ªß</h3>
          <ul className="text-sm text-orange-700 dark:text-orange-300 space-y-1">
            <li>‚Ä¢ Flash Sale s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã khi ƒëang ho·∫°t ƒë·ªông</li>
            <li>‚Ä¢ Countdown timer t·ª± ƒë·ªông c·∫≠p nh·∫≠t</li>
            <li>‚Ä¢ ƒê·ªô ∆∞u ti√™n cao s·∫Ω hi·ªÉn th·ªã tr∆∞·ªõc</li>
          </ul>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
        </div>
      ) : (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    T√™n Flash Sale
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Th·ªùi gian
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    S·∫£n ph·∫©m
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tr·∫°ng th√°i
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Thao t√°c
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {allFlashSales.map((flashSale: FlashSale) => (
                  <tr key={flashSale._id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {flashSale.name}
                        </div>
                        {flashSale.description && (
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            {flashSale.description}
                          </div>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      <div className="flex items-center gap-1 mb-1">
                        <Calendar className="w-4 h-4 text-gray-400" />
                        <span>{formatDateTime(flashSale.startTime)}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-4 h-4 text-gray-400" />
                        <span>{formatDateTime(flashSale.endTime)}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      {flashSale.products.length} s·∫£n ph·∫©m
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(flashSale)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => handleToggleStatus(flashSale)}
                          className={`p-1 rounded ${
                            flashSale.isActive 
                              ? 'text-green-600 hover:text-green-800' 
                              : 'text-gray-400 hover:text-gray-600'
                          }`}
                          title={flashSale.isActive ? 'T·∫Øt' : 'B·∫≠t'}
                        >
                          {flashSale.isActive ? 
                            <ToggleRight className="w-5 h-5" /> : 
                            <ToggleLeft className="w-5 h-5" />
                          }
                        </button>
                        <button
                          onClick={() => openEditModal(flashSale)}
                          className="text-blue-600 hover:text-blue-800 p-1 rounded"
                          title="S·ª≠a"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => {
                            setSelectedFlashSale(flashSale);
                            setShowDeleteModal(true);
                          }}
                          className="text-red-600 hover:text-red-800 p-1 rounded"
                          title="X√≥a"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Create/Edit Modal */}
      {(showCreateModal || showEditModal) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">
              {showCreateModal ? 'T·∫°o Flash Sale m·ªõi' : 'S·ª≠a Flash Sale'}
            </h2>

            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  T√™n Flash Sale * <span className="text-xs text-gray-500">(T√™n hi·ªÉn th·ªã cho kh√°ch h√†ng)</span>
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  placeholder="VD: Flash Sale 11.11, Gi·∫£m gi√° cu·ªëi tu·∫ßn..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  ƒê·ªô ∆∞u ti√™n <span className="text-xs text-gray-500">(S·ªë c√†ng cao c√†ng ∆∞u ti√™n hi·ªÉn th·ªã)</span>
                </label>
                <input
                  type="number"
                  value={formData.priority}
                  onChange={(e) => setFormData({ ...formData, priority: parseInt(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  placeholder="0 = ∆∞u ti√™n th·∫•p, 10 = ∆∞u ti√™n cao"
                />
              </div>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                M√¥ t·∫£ <span className="text-xs text-gray-500">(M√¥ t·∫£ chi ti·∫øt v·ªÅ ch∆∞∆°ng tr√¨nh Flash Sale)</span>
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                placeholder="VD: Flash Sale 24h v·ªõi gi·∫£m gi√° l√™n ƒë·∫øn 50% cho c√°c s·∫£n ph·∫©m hot..."
              />
            </div>

            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Th·ªùi gian b·∫Øt ƒë·∫ßu * <span className="text-xs text-gray-500">(Khi n√†o Flash Sale b·∫Øt ƒë·∫ßu)</span>
                </label>
                <input
                  type="datetime-local"
                  value={formData.startTime}
                  onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
                <p className="text-xs text-gray-500 mt-1">Th·ªùi gian hi·ªán t·∫°i: {new Date().toLocaleString('vi-VN')}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Th·ªùi gian k·∫øt th√∫c * <span className="text-xs text-gray-500">(Khi n√†o Flash Sale k·∫øt th√∫c)</span>
                </label>
                <input
                  type="datetime-local"
                  value={formData.endTime}
                  onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
                <p className="text-xs text-gray-500 mt-1">
                  {formData.startTime && formData.endTime && 
                    `Th·ªùi l∆∞·ª£ng: ${Math.round((new Date(formData.endTime).getTime() - new Date(formData.startTime).getTime()) / (1000 * 60 * 60))} gi·ªù`
                  }
                </p>
              </div>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                URL Banner <span className="text-xs text-gray-500">(H√¨nh ·∫£nh banner qu·∫£ng c√°o - kh√¥ng b·∫Øt bu·ªôc)</span>
              </label>
              <input
                type="url"
                value={formData.bannerImage}
                onChange={(e) => setFormData({ ...formData, bannerImage: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                placeholder="https://example.com/banner-flash-sale.jpg"
              />
            </div>

            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  S·∫£n ph·∫©m trong Flash Sale * <span className="text-xs text-gray-500">(Ch·ªçn s·∫£n ph·∫©m v√† thi·∫øt l·∫≠p gi√° khuy·∫øn m√£i)</span>
                </label>
                <button
                  type="button"
                  onClick={addProductToFlashSale}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1"
                >
                  <Plus className="w-4 h-4" />
                  Th√™m s·∫£n ph·∫©m
                </button>
              </div>

              <div className="grid grid-cols-4 gap-2 mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                <div>S·∫£n ph·∫©m</div>
                <div>Gi√° Flash Sale (‚Ç´)</div>
                <div>S·ªë l∆∞·ª£ng h·∫°n ch·∫ø</div>
                <div>Thao t√°c</div>
              </div>

              {selectedProducts.map((item, index) => {
                // Always provide fallback values for controlled inputs
                const safeProductId = item.productId ?? '';
                const safeFlashSalePrice = typeof item.flashSalePrice === 'number' ? item.flashSalePrice : 0;
                const safeQuantity = typeof item.quantity === 'number' ? item.quantity : 0;
                const selectedProduct = products.find((p: any) => p.id === item.productId);
                const originalPrice = selectedProduct?.price || 0;
                const discountPercent = originalPrice > 0 && item.flashSalePrice > 0 
                  ? Math.round(((originalPrice - item.flashSalePrice) / originalPrice) * 100)
                  : 0;
                
                return (
                  <div key={index} className="grid grid-cols-4 gap-2 mb-3 items-start border-b border-gray-200 dark:border-gray-600 pb-3">
                    <div>
                      <select
                        value={safeProductId}
                        onChange={(e) => updateSelectedProduct(index, 'productId', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      >
                        <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                        {products.map((product: any) => (
                          <option key={product.id} value={product.id}>
                            {product.name} - {(product.price || 0).toLocaleString('vi-VN')}‚Ç´
                          </option>
                        ))}
                      </select>
                      {selectedProduct && (
                        <p className="text-xs text-gray-500 mt-1">
                          Gi√° g·ªëc: {originalPrice.toLocaleString('vi-VN')}‚Ç´
                        </p>
                      )}
                    </div>
                    <div>
                      <input
                        type="number"
                        value={safeFlashSalePrice}
                        onChange={(e) => updateSelectedProduct(index, 'flashSalePrice', parseInt(e.target.value) || 0)}
                        placeholder="Nh·∫≠p gi√° khuy·∫øn m√£i"
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      />
                      {discountPercent > 0 && (
                        <p className="text-xs text-green-600 mt-1">
                          Gi·∫£m {discountPercent}%
                        </p>
                      )}
                    </div>
                    <div>
                      <input
                        type="number"
                        value={safeQuantity}
                        onChange={(e) => updateSelectedProduct(index, 'quantity', parseInt(e.target.value) || 0)}
                        placeholder="S·ªë l∆∞·ª£ng gi·ªõi h·∫°n"
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        S·ªë l∆∞·ª£ng c√≥ th·ªÉ b√°n trong Flash Sale
                      </p>
                    </div>
                    <div>
                      <button
                        type="button"
                        onClick={() => removeProductFromFlashSale(index)}
                        className="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-lg"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                );
              })}

              {selectedProducts.length === 0 && (
                <div className="text-center py-8 text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                  <p className="mb-2">Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong Flash Sale</p>
                  <p className="text-sm">Nh·∫•n "Th√™m s·∫£n ph·∫©m" ƒë·ªÉ b·∫Øt ƒë·∫ßu th√™m s·∫£n ph·∫©m v√†o ch∆∞∆°ng tr√¨nh Flash Sale</p>
                </div>
              )}
            </div>

            <div className="flex justify-end gap-2">
              <button
                onClick={() => {
                  showCreateModal ? setShowCreateModal(false) : setShowEditModal(false);
                  resetForm();
                }}
                className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
              >
                H·ªßy
              </button>
              <button
                onClick={showCreateModal ? handleCreateFlashSale : handleUpdateFlashSale}
                disabled={loading}
                className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg disabled:opacity-50"
              >
                {loading ? 'ƒêang x·ª≠ l√Ω...' : (showCreateModal ? 'T·∫°o Flash Sale' : 'C·∫≠p nh·∫≠t')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && selectedFlashSale && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md mt-10">
            <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">X√°c nh·∫≠n x√≥a</h2>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Flash Sale "<strong>{selectedFlashSale.name}</strong>"? 
              H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
            </p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => {
                  setShowDeleteModal(false);
                  setSelectedFlashSale(null);
                }}
                className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
              >
                H·ªßy
              </button>
              <button
                onClick={handleDeleteFlashSale}
                disabled={loading}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg disabled:opacity-50"
              >
                {loading ? 'ƒêang x√≥a...' : 'X√≥a'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminFlashSalePage;
