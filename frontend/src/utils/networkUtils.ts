/**
 * Network Utilities for Localhost Development
 *
 * C√°c tr∆∞·ªùng h·ª£p l·ªói m·∫°ng ph·ªï bi·∫øn trong m√¥i tr∆∞·ªùng localhost:
 *
 * 1. Backend Server Issues:
 *    - Server crash/d·ª´ng ho·∫°t ƒë·ªông
 *    - Port conflict (3001 ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng)
 *    - Database connection failed
 *    - Out of memory
 *
 * 2. Frontend Issues:
 *    - Vite dev server crash
 *    - Hot reload failed
 *    - Build errors
 *    - Memory leaks
 *
 * 3. Network Configuration:
 *    - DNS resolution issues
 *    - Firewall blocking
 *    - Proxy conflicts
 *    - Browser cache problems
 *
 * 4. API/Data Loading:
 *    - Slow database queries
 *    - Large payload timeout
 *    - Too many concurrent requests
 *    - API rate limiting
 */

export interface NetworkErrorDetails {
  type: 'server_down' | 'timeout' | 'connection_refused' | 'cors' | 'parse_error' | 'unknown';
  message: string;
  suggestion: string;
  technicalDetails?: string;
}

/**
 * Ph√¢n t√≠ch l·ªói network v√† ƒë∆∞a ra g·ª£i √Ω kh·∫Øc ph·ª•c
 */
export const analyzeNetworkError = (error: any): NetworkErrorDetails => {
  const errorMessage = error?.message?.toLowerCase() || '';
  const errorName = error?.name?.toLowerCase() || '';

  // Server kh√¥ng ph·∫£n h·ªìi (Backend crash)
  if (errorMessage.includes('fetch') && errorMessage.includes('failed')) {
    return {
      type: 'server_down',
      message: 'Backend server kh√¥ng ph·∫£n h·ªìi',
      suggestion: 'Ki·ªÉm tra xem backend server c√≥ ƒëang ch·∫°y kh√¥ng t·∫°i http://localhost:3001',
      technicalDetails: 'TypeError: Failed to fetch - Server c√≥ th·ªÉ ƒë√£ crash ho·∫∑c ch∆∞a kh·ªüi ƒë·ªông',
    };
  }

  // Connection refused (Port kh√¥ng available)
  if (errorMessage.includes('connection refused') || errorMessage.includes('econnrefused')) {
    return {
      type: 'connection_refused',
      message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server',
      suggestion:
        'Backend server ch∆∞a kh·ªüi ƒë·ªông ho·∫∑c port 3001 b·ªã conflict. Ch·∫°y: npm run dev (backend)',
      technicalDetails: 'ECONNREFUSED - Port 3001 kh√¥ng c√≥ service n√†o ƒëang l·∫Øng nghe',
    };
  }

  // Timeout (Server qu√° ch·∫≠m)
  if (errorName === 'aborterror' || errorMessage.includes('timeout')) {
    return {
      type: 'timeout',
      message: 'Server ph·∫£n h·ªìi qu√° ch·∫≠m',
      suggestion:
        'Database query c√≥ th·ªÉ qu√° ch·∫≠m ho·∫∑c server ƒëang overload. Ki·ªÉm tra console backend.',
      technicalDetails: 'Request timeout sau 5 gi√¢y - Server processing qu√° l√¢u',
    };
  }

  // CORS Error (C·∫•u h√¨nh backend sai)
  if (errorMessage.includes('cors') || errorMessage.includes('cross-origin')) {
    return {
      type: 'cors',
      message: 'L·ªói CORS policy',
      suggestion: 'Backend ch∆∞a c·∫•u h√¨nh CORS cho localhost:3000. C·∫ßn th√™m CORS middleware.',
      technicalDetails: 'CORS policy blocking request t·ª´ localhost:3000 ƒë·∫øn localhost:3001',
    };
  }

  // JSON Parse Error (API response b·ªã l·ªói)
  if (errorMessage.includes('json') || errorMessage.includes('parse')) {
    return {
      type: 'parse_error',
      message: 'D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá',
      suggestion: 'Backend API tr·∫£ v·ªÅ format kh√¥ng ƒë√∫ng. Ki·ªÉm tra response format.',
      technicalDetails: 'JSON parse error - API response kh√¥ng ph·∫£i valid JSON',
    };
  }

  // Unknown error
  return {
    type: 'unknown',
    message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
    suggestion: 'Ki·ªÉm tra network tab trong DevTools ƒë·ªÉ xem chi ti·∫øt l·ªói.',
    technicalDetails: `${errorName}: ${errorMessage}`,
  };
};

/**
 * Fetch v·ªõi retry v√† timeout handling
 */
export const fetchWithRetry = async (
  url: string,
  options: RequestInit = {},
  maxRetries = 3,
  timeout = 5000
): Promise<Response> => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return response;
    } catch (error: any) {
      console.warn(`Attempt ${attempt}/${maxRetries} failed:`, error.message);

      if (attempt === maxRetries) {
        throw error;
      }

      // Exponential backoff: 1s, 2s, 4s
      const delay = 1000 * Math.pow(2, attempt - 1);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  throw new Error('Max retries exceeded');
};

/**
 * Health check cho backend server
 */
export const checkBackendHealth = async (): Promise<boolean> => {
  try {
    const response = await fetch('http://localhost:3001/api/health', {
      method: 'GET',
      timeout: 3000,
    } as any);
    return response.ok;
  } catch {
    return false;
  }
};

/**
 * Mock API calls for development when backend is down
 */
export const createMockApiResponse = <T>(data: T, delay = 500): Promise<T> => {
  return new Promise(resolve => {
    setTimeout(() => resolve(data), delay);
  });
};

/**
 * Development mode error scenarios
 */
export const DevErrorScenarios = {
  // Simulate server crash
  simulateServerCrash: () => {
    throw new Error('ECONNREFUSED: Connection refused to localhost:3001');
  },

  // Simulate timeout
  simulateTimeout: async () => {
    await new Promise(resolve => setTimeout(resolve, 6000));
    throw new Error('Request timeout');
  },

  // Simulate CORS error
  simulateCorsError: () => {
    throw new Error('CORS policy: Cross origin requests are only supported for protocol schemes');
  },

  // Simulate invalid JSON
  simulateParseError: () => {
    throw new Error('Unexpected token < in JSON at position 0');
  },
};

/**
 * Logging utility for network errors
 */
export const logNetworkError = (error: NetworkErrorDetails, context: string) => {
  console.group(`üî¥ Network Error in ${context}`);
  console.error('Type:', error.type);
  console.error('Message:', error.message);
  console.warn('Suggestion:', error.suggestion);
  if (error.technicalDetails) {
    console.info('Technical Details:', error.technicalDetails);
  }
  console.groupEnd();
};
