import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async (): Promise<void> => {
  try {
    // T·∫Øt c√°c warning mongoose
    mongoose.set('strictQuery', false);
    
    // C·∫•u h√¨nh connection v·ªõi retry logic
    const conn = await mongoose.connect(process.env.MONGODB_URI as string, {
      // T·ªëi ∆∞u h√≥a connection
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 10000, // TƒÉng timeout
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
      bufferCommands: false,
      
      // SSL configuration ƒë·ªÉ tr√°nh l·ªói SSL
      tls: true,
      tlsAllowInvalidCertificates: false,
      tlsAllowInvalidHostnames: false,
      
      // Retry configuration
      retryWrites: true,
      retryReads: true,
      maxConnecting: 2,
    });
    
    console.log(`‚úÖ MongoDB Connected: ${conn.connection.host}`);
    console.log(`üìä Database: ${conn.connection.name}`);
    
    // Log connection events
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå MongoDB connection error:', err.message);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('‚ö†Ô∏è MongoDB disconnected');
    });
    
    mongoose.connection.on('reconnected', () => {
      console.log('‚úÖ MongoDB reconnected');
    });
    
  } catch (error: any) {
    console.error('‚ùå MongoDB connection failed:', error.message);
    
    // Retry v·ªõi c·∫•u h√¨nh kh√°c n·∫øu l·ªói SSL
    if (error.message.includes('SSL') || error.message.includes('TLS')) {
      console.log('üîÑ Retrying with different SSL configuration...');
      
      try {
        const conn = await mongoose.connect(process.env.MONGODB_URI as string, {
          maxPoolSize: 5,
          serverSelectionTimeoutMS: 15000,
          socketTimeoutMS: 45000,
          connectTimeoutMS: 15000,
          bufferCommands: false,
          
          // ƒê∆°n gi·∫£n h√≥a SSL config
          ssl: true,
          
          retryWrites: true,
        });
        
        console.log(`‚úÖ MongoDB Connected (retry): ${conn.connection.host}`);
        return;
        
      } catch (retryError: any) {
        console.error('‚ùå Retry failed:', retryError.message);
      }
    }
    
    // N·∫øu v·∫´n fail, log chi ti·∫øt v√† ti·∫øp t·ª•c ch·∫°y server
    console.error('‚ö†Ô∏è Starting server without database connection');
    console.error('üìù Please check your MongoDB Atlas configuration:');
    console.error('   1. Cluster is running');
    console.error('   2. IP address is whitelisted');
    console.error('   3. Username/password is correct');
    console.error('   4. Network connectivity is stable');
    
    // Kh√¥ng exit process, ƒë·ªÉ server v·∫´n ch·∫°y
    // process.exit(1);
  }
};

export default connectDB;
